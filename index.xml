<craft name="bed">
    <parameter name="width" type="int" default="40"/>
    <parameter name="length" type="int" default="75"/>
    <parameter name="mattressHeight" type="int" default="10"/>
    <parameter name="legHeight" type="int" default="8"/>
    <parameter name="headRound" type="int" default="1"/>
    <parameter name="bedFrame" type="int" default="1"/>
    
    <g layout="centerXY() lineupZ(-38 -)">
        <stack layout="alignY(5%)">
            <script>
                function main() {
                    // Pillow
                    var p, pAll, decrement;
                    var space, count, pAll;
                    
                    decrement = 0;
            
                    // parts
                    p = cylinder({
                        r: 10,
                        h: 26 - decrement
                    }).scale([0.4, 1, 1]).rotateY(90);
                    
                    // transformations
                    // smaller pillow for narrow bed
                    if (params.width < 35) {
                        decrement = 35 - params.width;
                        
                        p = cylinder({
                            r: 10,
                            h: 26 - decrement
                        }).scale([0.4, 0.5, 1]).rotateY(90);
    
                    }
                    
                    // handles number of pillows depending on bed width
                    if (params.width / 2 < 34) {
                        return p;
                    }
                    else {
                        // multi-pillow beds
                        count = 1;
                        pAll = p;
                        do {
                            space = params.width;
                            pAll = union(
                                pAll,
                                p.translate([(26 * count) + (2 * count), 0, 0])
                            );
                            count += 1;
                            space = space - (26 * count) - (2 * count);
                        } while ((space - 8) >= 34);
    
                        return pAll;
                    }
                }
            </script>
            
            <script>
                function main() {
                    // Mattress
                    // cube is scaled because certain dimensions may turn it into torus
                    return cube({
                        size: 1, 
                        round: true
                    }).scale([params.width, params.length, params.mattressHeight]);
                }
            </script>
        </stack>
            
        <script>
            function main() {
                // Frame
                var legf1, legf2, legb1, legb2;
                var head, base, baseHollow, leg, headLeg;
                
                // handles minimum values
                if (params.width < 20) { params.width = 20 };

                // parts
                head = cube({size: [params.width, params.mattressHeight * 3, 4]});
                base = cube({size: [params.width + 2, params.length + 2, 5]});
                baseHollow = cube({size: [params.width, params.length - 1, 2]});
                leg = cube({size: [3, 3, params.legHeight]});
                headLeg = cube({size: [4, 4, (params.mattressHeight * 3) + (params.legHeight - 2)]});

                // transformations
                head = head.rotateX(90);
                head = head.translate([0, 4, 4]);

                base = base.translate([-1, 0, 4]);

                base = difference(
                    base,
                    baseHollow.translate([0, 1, 7])
                );

                // legs
                legf1 = leg.translate([params.width - 2, params.length - 1, -params.legHeight + 4]);
                legf2 = legf1.translate([-params.width + 1, 0, 0]);

                legb1 = headLeg.translate([params.width - 2, 0, -params.legHeight + 4]);
                legb2 = legb1.translate([-params.width, 0, 0]);

                // handles rounded headboard
                if (params.headRound == true) {
                    var dome;

                    // parts
                    dome = cylinder({
                        r: params.width / 2,
                        h: 4
                    });

                    // transformations
                    dome = dome.rotateX(90);
                    dome = dome.scale([1, 1, 0.70])
                    dome = dome.translate([params.width / 2, 4, params.mattressHeight * 3]);
                    dome = difference(
                        dome,
                        cube({size: [params.width, params.width / 2, 4]}).rotateX(90).translate([0, 0, (-params.width / 2) + 4])
                    );
                    
                    head = union(head, dome);
                }
                
                if (params.bedFrame) {
                    return union(head, base, legf1, legf2, legb1, legb2);
                }
            }
        </script>
    </g>

</craft>
